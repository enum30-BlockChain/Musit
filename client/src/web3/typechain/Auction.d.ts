/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AuctionInterface extends ethers.utils.Interface {
  functions: {
    "bid(uint256)": FunctionFragment;
    "calPriceWithFee(uint256)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "end(uint256)": FunctionFragment;
    "enroll(uint256,uint256,address,uint256)": FunctionFragment;
    "feeAccount()": FunctionFragment;
    "feePercent()": FunctionFragment;
    "forceCancel(uint256)": FunctionFragment;
    "forceEnd(uint256)": FunctionFragment;
    "getBlockTimestamp()": FunctionFragment;
    "itemCounter()": FunctionFragment;
    "items(uint256)": FunctionFragment;
    "minBidUnit()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingBids(uint256,address)": FunctionFragment;
    "removeFee(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bid", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "calPriceWithFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "end", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "enroll",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceCancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "itemCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "items", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "minBidUnit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingBids",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calPriceWithFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enroll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeAccount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forceEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "itemCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minBidUnit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Bid(uint256,address,uint256)": EventFragment;
    "Cancel(uint256,address)": EventFragment;
    "End(uint256,address,uint256,uint256)": EventFragment;
    "Enrolled(uint256,uint256,address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "End"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Enrolled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type BidEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    itemId: BigNumber;
    topBidder: string;
    topBid: BigNumber;
  }
>;

export type CancelEvent = TypedEvent<
  [BigNumber, string] & { itemId: BigNumber; seller: string }
>;

export type EndEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber] & {
    itemId: BigNumber;
    buyer: string;
    buyingPrice: BigNumber;
    fee: BigNumber;
  }
>;

export type EnrolledEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string] & {
    itemId: BigNumber;
    _startPrice: BigNumber;
    _nft: string;
    _tokenId: BigNumber;
    seller: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type WithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    itemId: BigNumber;
    bidder: string;
    balance: BigNumber;
  }
>;

export class Auction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AuctionInterface;

  functions: {
    bid(
      _itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calPriceWithFee(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancel(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    end(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enroll(
      _startPrice: BigNumberish,
      _endAt: BigNumberish,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeAccount(overrides?: CallOverrides): Promise<[string]>;

    feePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    forceCancel(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceEnd(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    itemCounter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        number,
        string
      ] & {
        startPrice: BigNumber;
        startAt: BigNumber;
        endAt: BigNumber;
        tokenId: BigNumber;
        seller: string;
        topBidder: string;
        topBid: BigNumber;
        status: number;
        nft: string;
      }
    >;

    minBidUnit(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingBids(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeFee(
      _priceWithFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bid(
    _itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calPriceWithFee(
    _price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancel(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  end(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enroll(
    _startPrice: BigNumberish,
    _endAt: BigNumberish,
    _nft: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeAccount(overrides?: CallOverrides): Promise<string>;

  feePercent(overrides?: CallOverrides): Promise<BigNumber>;

  forceCancel(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceEnd(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  itemCounter(overrides?: CallOverrides): Promise<BigNumber>;

  items(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      number,
      string
    ] & {
      startPrice: BigNumber;
      startAt: BigNumber;
      endAt: BigNumber;
      tokenId: BigNumber;
      seller: string;
      topBidder: string;
      topBid: BigNumber;
      status: number;
      nft: string;
    }
  >;

  minBidUnit(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingBids(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeFee(
    _priceWithFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bid(_itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    calPriceWithFee(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(_itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    end(_itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    enroll(
      _startPrice: BigNumberish,
      _endAt: BigNumberish,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeAccount(overrides?: CallOverrides): Promise<string>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    forceCancel(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceEnd(_itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    itemCounter(overrides?: CallOverrides): Promise<BigNumber>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        number,
        string
      ] & {
        startPrice: BigNumber;
        startAt: BigNumber;
        endAt: BigNumber;
        tokenId: BigNumber;
        seller: string;
        topBidder: string;
        topBid: BigNumber;
        status: number;
        nft: string;
      }
    >;

    minBidUnit(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingBids(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFee(
      _priceWithFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(_itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Bid(uint256,address,uint256)"(
      itemId?: BigNumberish | null,
      topBidder?: string | null,
      topBid?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { itemId: BigNumber; topBidder: string; topBid: BigNumber }
    >;

    Bid(
      itemId?: BigNumberish | null,
      topBidder?: string | null,
      topBid?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { itemId: BigNumber; topBidder: string; topBid: BigNumber }
    >;

    "Cancel(uint256,address)"(
      itemId?: BigNumberish | null,
      seller?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { itemId: BigNumber; seller: string }
    >;

    Cancel(
      itemId?: BigNumberish | null,
      seller?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { itemId: BigNumber; seller: string }
    >;

    "End(uint256,address,uint256,uint256)"(
      itemId?: BigNumberish | null,
      buyer?: string | null,
      buyingPrice?: null,
      fee?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        itemId: BigNumber;
        buyer: string;
        buyingPrice: BigNumber;
        fee: BigNumber;
      }
    >;

    End(
      itemId?: BigNumberish | null,
      buyer?: string | null,
      buyingPrice?: null,
      fee?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        itemId: BigNumber;
        buyer: string;
        buyingPrice: BigNumber;
        fee: BigNumber;
      }
    >;

    "Enrolled(uint256,uint256,address,uint256,address)"(
      itemId?: BigNumberish | null,
      _startPrice?: null,
      _nft?: null,
      _tokenId?: BigNumberish | null,
      seller?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber, string],
      {
        itemId: BigNumber;
        _startPrice: BigNumber;
        _nft: string;
        _tokenId: BigNumber;
        seller: string;
      }
    >;

    Enrolled(
      itemId?: BigNumberish | null,
      _startPrice?: null,
      _nft?: null,
      _tokenId?: BigNumberish | null,
      seller?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber, string],
      {
        itemId: BigNumber;
        _startPrice: BigNumber;
        _nft: string;
        _tokenId: BigNumber;
        seller: string;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Withdraw(uint256,address,uint256)"(
      itemId?: BigNumberish | null,
      bidder?: string | null,
      balance?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { itemId: BigNumber; bidder: string; balance: BigNumber }
    >;

    Withdraw(
      itemId?: BigNumberish | null,
      bidder?: string | null,
      balance?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { itemId: BigNumber; bidder: string; balance: BigNumber }
    >;
  };

  estimateGas: {
    bid(
      _itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calPriceWithFee(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    end(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enroll(
      _startPrice: BigNumberish,
      _endAt: BigNumberish,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    forceCancel(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceEnd(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    itemCounter(overrides?: CallOverrides): Promise<BigNumber>;

    items(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    minBidUnit(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingBids(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFee(
      _priceWithFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bid(
      _itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calPriceWithFee(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    end(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enroll(
      _startPrice: BigNumberish,
      _endAt: BigNumberish,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceCancel(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceEnd(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    itemCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBidUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingBids(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFee(
      _priceWithFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
