/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MarketplaceInterface extends ethers.utils.Interface {
  functions: {
    "enroll(address,uint256,uint256)": FunctionFragment;
    "feeAccount()": FunctionFragment;
    "feePercent()": FunctionFragment;
    "getTotalPrice(uint256)": FunctionFragment;
    "itemCount()": FunctionFragment;
    "items(uint256)": FunctionFragment;
    "nftToItemId(address,uint256)": FunctionFragment;
    "purchase(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "enroll",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "itemCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "items", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nftToItemId",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "enroll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeAccount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "itemCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftToItemId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;

  events: {
    "Bought(uint256,uint256,uint256,address,address,address)": EventFragment;
    "Enrolled(uint256,uint256,uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Enrolled"): EventFragment;
}

export type BoughtEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string, string] & {
    itemId: BigNumber;
    tokenId: BigNumber;
    price: BigNumber;
    seller: string;
    buyer: string;
    nft: string;
  }
>;

export type EnrolledEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string] & {
    itemId: BigNumber;
    tokenId: BigNumber;
    price: BigNumber;
    seller: string;
    nft: string;
  }
>;

export class Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketplaceInterface;

  functions: {
    enroll(
      _nft: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeAccount(overrides?: CallOverrides): Promise<[string]>;

    feePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalPrice(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    itemCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, boolean] & {
        itemId: BigNumber;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        nft: string;
        sold: boolean;
      }
    >;

    nftToItemId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    purchase(
      _itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  enroll(
    _nft: string,
    _tokenId: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeAccount(overrides?: CallOverrides): Promise<string>;

  feePercent(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalPrice(
    _itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  itemCount(overrides?: CallOverrides): Promise<BigNumber>;

  items(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, string, boolean] & {
      itemId: BigNumber;
      tokenId: BigNumber;
      price: BigNumber;
      seller: string;
      nft: string;
      sold: boolean;
    }
  >;

  nftToItemId(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  purchase(
    _itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    enroll(
      _nft: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeAccount(overrides?: CallOverrides): Promise<string>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPrice(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemCount(overrides?: CallOverrides): Promise<BigNumber>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string, boolean] & {
        itemId: BigNumber;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        nft: string;
        sold: boolean;
      }
    >;

    nftToItemId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchase(_itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Bought(uint256,uint256,uint256,address,address,address)"(
      itemId?: null,
      tokenId?: null,
      price?: null,
      seller?: string | null,
      buyer?: string | null,
      nft?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, string, string],
      {
        itemId: BigNumber;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        buyer: string;
        nft: string;
      }
    >;

    Bought(
      itemId?: null,
      tokenId?: null,
      price?: null,
      seller?: string | null,
      buyer?: string | null,
      nft?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, string, string],
      {
        itemId: BigNumber;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        buyer: string;
        nft: string;
      }
    >;

    "Enrolled(uint256,uint256,uint256,address,address)"(
      itemId?: null,
      tokenId?: null,
      price?: null,
      seller?: string | null,
      nft?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, string],
      {
        itemId: BigNumber;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        nft: string;
      }
    >;

    Enrolled(
      itemId?: null,
      tokenId?: null,
      price?: null,
      seller?: string | null,
      nft?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, string],
      {
        itemId: BigNumber;
        tokenId: BigNumber;
        price: BigNumber;
        seller: string;
        nft: string;
      }
    >;
  };

  estimateGas: {
    enroll(
      _nft: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPrice(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemCount(overrides?: CallOverrides): Promise<BigNumber>;

    items(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nftToItemId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchase(
      _itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    enroll(
      _nft: string,
      _tokenId: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalPrice(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftToItemId(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchase(
      _itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
