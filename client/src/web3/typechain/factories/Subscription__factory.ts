/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Subscription, SubscriptionInterface } from "../Subscription";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "enum Subscription.Plans",
        name: "plan",
        type: "uint8",
      },
    ],
    name: "buy",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Subscription.Plans",
        name: "plan",
        type: "uint8",
      },
    ],
    name: "getDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getEndAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getIsFreeCouponUsed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Subscription.Plans",
        name: "plan",
        type: "uint8",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d7d806100606000396000f3fe60806040526004361061004a5760003560e01c8063137cb58e1461004f57806314107f3c1461008c57806337f1e7f2146100a8578063bbd964f4146100e5578063ff874b0a14610122575b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190610a32565b61015f565b6040516100839190610b86565b60405180910390f35b6100a660048036038101906100a19190610a5b565b6101a8565b005b3480156100b457600080fd5b506100cf60048036038101906100ca9190610a5b565b610508565b6040516100dc9190610b86565b60405180910390f35b3480156100f157600080fd5b5061010c60048036038101906101079190610a5b565b610762565b6040516101199190610b86565b60405180910390f35b34801561012e57600080fd5b5061014960048036038101906101449190610a32565b6109b2565b6040516101569190610b0b565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6101b181610508565b3410156101bd57600080fd5b600060038111156101f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816003811115610230577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156102c457600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156102c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ba90610b66565b60405180910390fd5b5b42600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561036e5761031481610762565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103629190610bb2565b925050819055506103cc565b600042905061037c82610762565b816103879190610bb2565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610432573d6000803e3d6000fd5b506000600381111561046d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160038111156104a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610505576001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b50565b6000806003811115610543577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82600381111561057c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561058b576000905061075d565b600160038111156105c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260038111156105fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561061357662386f26fc10000905061075d565b6002600381111561064d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826003811115610686577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561069b5766470de4df820000905061075d565b6003808111156106d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82600381111561070d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561072257666a94d74f430000905061075d565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075490610b26565b60405180910390fd5b919050565b600080600381111561079d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260038111156107d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156107e75762278d0090506109ad565b60016003811115610821577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82600381111561085a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561086b5762278d0090506109ad565b600260038111156108a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260038111156108de577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156108ef576276a70090506109ad565b600380811115610928577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826003811115610961577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156109725762ed4e0090506109ad565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a490610b46565b60405180910390fd5b919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600081359050610a1781610d20565b92915050565b600081359050610a2c81610d37565b92915050565b600060208284031215610a4457600080fd5b6000610a5284828501610a08565b91505092915050565b600060208284031215610a6d57600080fd5b6000610a7b84828501610a1d565b91505092915050565b610a8d81610c1a565b82525050565b6000610aa0601f83610ba1565b9150610aab82610c7f565b602082019050919050565b6000610ac3602283610ba1565b9150610ace82610ca8565b604082019050919050565b6000610ae6601b83610ba1565b9150610af182610cf7565b602082019050919050565b610b0581610c46565b82525050565b6000602082019050610b206000830184610a84565b92915050565b60006020820190508181036000830152610b3f81610a93565b9050919050565b60006020820190508181036000830152610b5f81610ab6565b9050919050565b60006020820190508181036000830152610b7f81610ad9565b9050919050565b6000602082019050610b9b6000830184610afc565b92915050565b600082825260208201905092915050565b6000610bbd82610c46565b9150610bc883610c46565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610bfd57610bfc610c50565b5b828201905092915050565b6000610c1382610c26565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f43616e6e6f742067657420707269636520666f722077726f6e6720706c616e00600082015250565b7f43616e6e6f7420676574206475726174696f6e20666f722077726f6e6720706c60008201527f616e000000000000000000000000000000000000000000000000000000000000602082015250565b7f4672656520636f75706f6e20697320616c726561647920757365640000000000600082015250565b610d2981610c08565b8114610d3457600080fd5b50565b60048110610d4457600080fd5b5056fea2646970667358221220c37c11ed287c0c59fa585b2bdac881c7490610bacf1c50fed2b93db2baf1fad764736f6c63430008040033";

export class Subscription__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Subscription> {
    return super.deploy(overrides || {}) as Promise<Subscription>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Subscription {
    return super.attach(address) as Subscription;
  }
  connect(signer: Signer): Subscription__factory {
    return super.connect(signer) as Subscription__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SubscriptionInterface {
    return new utils.Interface(_abi) as SubscriptionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Subscription {
    return new Contract(address, _abi, signerOrProvider) as Subscription;
  }
}
