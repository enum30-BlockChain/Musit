/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Subscription, SubscriptionInterface } from "../Subscription";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "enum Subscription.Plans",
        name: "plan",
        type: "uint8",
      },
    ],
    name: "buy",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Subscription.Plans",
        name: "plan",
        type: "uint8",
      },
    ],
    name: "getDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getEndAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Subscription.Plans",
        name: "plan",
        type: "uint8",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a64806100606000396000f3fe60806040526004361061003f5760003560e01c8063137cb58e1461004457806314107f3c1461008157806337f1e7f21461009d578063bbd964f4146100da575b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906107bb565b610117565b60405161007891906108a2565b60405180910390f35b61009b600480360381019061009691906107e4565b610160565b005b3480156100a957600080fd5b506100c460048036038101906100bf91906107e4565b6102e7565b6040516100d191906108a2565b60405180910390f35b3480156100e657600080fd5b5061010160048036038101906100fc91906107e4565b610541565b60405161010e91906108a2565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610169816102e7565b34101561017557600080fd5b42600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054111561021f576101c581610541565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461021391906108ce565b9250508190555061027d565b600042905061022d82610541565b8161023891906108ce565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156102e3573d6000803e3d6000fd5b5050565b6000806003811115610322577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82600381111561035b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561036a576000905061053c565b600160038111156103a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260038111156103dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156103f257662386f26fc10000905061053c565b6002600381111561042c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826003811115610465577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561047a5766470de4df820000905061053c565b6003808111156104b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260038111156104ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561050157666a94d74f430000905061053c565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053390610862565b60405180910390fd5b919050565b600080600381111561057c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260038111156105b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156105c65762278d00905061078c565b60016003811115610600577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826003811115610639577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561064a5762278d00905061078c565b60026003811115610684577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260038111156106bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156106ce57624f1a00905061078c565b600380811115610707577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826003811115610740577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415610751576276a700905061078c565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078390610882565b60405180910390fd5b919050565b6000813590506107a081610a07565b92915050565b6000813590506107b581610a1e565b92915050565b6000602082840312156107cd57600080fd5b60006107db84828501610791565b91505092915050565b6000602082840312156107f657600080fd5b6000610804848285016107a6565b91505092915050565b600061081a601f836108bd565b91506108258261098f565b602082019050919050565b600061083d6022836108bd565b9150610848826109b8565b604082019050919050565b61085c81610956565b82525050565b6000602082019050818103600083015261087b8161080d565b9050919050565b6000602082019050818103600083015261089b81610830565b9050919050565b60006020820190506108b76000830184610853565b92915050565b600082825260208201905092915050565b60006108d982610956565b91506108e483610956565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561091957610918610960565b5b828201905092915050565b600061092f82610936565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f43616e6e6f742067657420707269636520666f722077726f6e6720706c616e00600082015250565b7f43616e6e6f7420676574206475726174696f6e20666f722077726f6e6720706c60008201527f616e000000000000000000000000000000000000000000000000000000000000602082015250565b610a1081610924565b8114610a1b57600080fd5b50565b60048110610a2b57600080fd5b5056fea2646970667358221220725411d4e80db927df2149fdb41b57a30e7c92c03293a855d71a21886ca61f3064736f6c63430008040033";

export class Subscription__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Subscription> {
    return super.deploy(overrides || {}) as Promise<Subscription>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Subscription {
    return super.attach(address) as Subscription;
  }
  connect(signer: Signer): Subscription__factory {
    return super.connect(signer) as Subscription__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SubscriptionInterface {
    return new utils.Interface(_abi) as SubscriptionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Subscription {
    return new Contract(address, _abi, signerOrProvider) as Subscription;
  }
}
